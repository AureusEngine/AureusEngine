adjustment_layer = {((0, 0, 4), 3): {'P': -5.950145268242089, 'C': 6.081325699109279, 'F': -4.320195122505359, 'X': 15.207733925597047, 'E': -16.716387152213056, 'Y': 5.697667918254173}, ((0, 0, 0), 0): {'P': 0.005332466753323217, 'C': 0.0006669333066691152, 'F': 0.003999600039996665, 'X': -0.009999000099990002, 'E': 0.0, 'Y': 0.0}, ((0, 2, 2), 1): {'P': 0.1415659182593494, 'C': 13.18237326710414, 'F': -15.96753701054515, 'X': 1.3593152954941174, 'E': 2.773005543227735, 'Y': -1.4787230135401812}, ((0, 4, 4), 0): {'P': -0.004074407440747052, 'C': -0.0022222222222261223, 'F': -0.0011111111111130612, 'X': -0.0007410741074114213, 'E': -0.00037003700370075165, 'Y': -0.0014811481148129246}, ((0, 0, 0), 1): {'P': -3.0411516609426528, 'C': 12.188387324054332, 'F': -14.366230103274152, 'X': 0.05383101072697204, 'E': 8.490190178909085, 'Y': -3.3250267494735786}, ((0, 0, 0), 3): {'P': -5.3853299614123245, 'C': 11.99144727340007, 'F': -15.347908564888296, 'X': 16.687685867555636, 'E': -10.91255999842587, 'Y': 2.9666653837707706}, ((0, 2, 2), 5): {'P': 3.8801943914827746, 'C': 9.887517740635461, 'F': -16.177502683297668, 'X': 5.063661931722239, 'E': -3.6941314054652494, 'Y': 1.0402600249224356}, ((0, 1, 4), 0): {'P': 0.005454454554545407, 'C': 0.0022727727227298544, 'F': 0.0009089091090892509, 'X': 0.0004549545045495762, 'E': 0.0009089091090892509, 'Y': 0.0}, ((0, 1, 3), 5): {'P': -1.147806121383681, 'C': -4.29882114874238, 'F': 8.214778371953262, 'X': -1.5532671493868566, 'E': -2.5513046517569533, 'Y': 1.326420699316607}, ((0, 0, 1), 3): {'P': -2.95941925171914, 'C': 0.8935874052550012, 'F': -6.79545408880026, 'X': 18.756073500565346, 'E': -13.068391684239142, 'Y': 3.173604118938166}, ((0, 0, 0), 5): {'P': -9.662571261410385, 'C': 12.18256954500544, 'F': 0.14636684845999248, 'X': -1.2388708601074505, 'E': -2.8629513286908983, 'Y': 1.425457056743305}, ((0, 0, 0), 2): {'P': -3.242820784956109, 'C': -5.076186965264027, 'F': 20.30227927192818, 'X': -11.38034308628694, 'E': -4.180156763471571, 'Y': 3.5772283280504458}, ((0, 0, 0), 4): {'P': -7.878615475712579, 'C': 17.561213870972082, 'F': -8.906658133059942, 'X': -11.181963253607734, 'E': 15.563054154041604, 'Y': -5.157031162633441}, ((0, 0, 1), 1): {'P': -4.392407146661824, 'C': 6.064454405422843, 'F': -5.096539437274705, 'X': 0.8725855389088711, 'E': 5.1122747533225565, 'Y': -2.5603681137177356}, ((0, 0, 1), 4): {'P': -3.683998549748182, 'C': 4.096481871395682, 'F': -0.7128891203106953, 'X': -8.488946922549367, 'E': 14.018031587739438, 'Y': -5.2286788665268835}, ((0, 0, 3), 5): {'P': -10.407939793158683, 'C': 4.951312523032618, 'F': 8.214778371953262, 'X': -1.5532671493868566, 'E': -2.5313046517569533, 'Y': 1.326420699316607}, ((0, 0, 1), 5): {'P': -4.039172848906318, 'C': -3.3089998303513752, 'F': 7.981400225159279, 'X': 2.0786787866099763, 'E': -3.7972909016747582, 'Y': 1.0753845691631874}, ((0, 0, 1), 2): {'P': -2.7855359153394375, 'C': -13.60712034452969, 'F': 29.213372985788673, 'X': -9.936701921285357, 'E': -6.946945472385505, 'Y': 4.062930667751309}, ((0, 2, 3), 4): {'P': -1.976901816006805, 'C': 11.36897914449012, 'F': -7.33884037540259, 'X': -11.67700171728142, 'E': 14.04381416942301, 'Y': -4.420049405222311}, ((0, 3, 4), 4): {'P': -1.4896772777256828, 'C': 7.735527890328852, 'F': -2.8440883469910254, 'X': -12.063300812944878, 'E': 12.20220216848793, 'Y': -3.540663621155192}, ((0, 0, 4), 5): {'P': -6.009252438015011, 'C': 0.9716752646328111, 'F': 4.773557969925326, 'X': 3.7876190954672158, 'E': -5.461109998005451, 'Y': 1.927510105995097}, ((0, 2, 3), 5): {'P': -1.1450985898009556, 'C': 4.952298301111849, 'F': -1.0433990244577274, 'X': -1.5516309731617586, 'E': -2.540679578783833, 'Y': 1.3285098650924176}, ((0, 1, 2), 0): {'P': 0.0, 'C': 0.0, 'F': 0.0, 'X': 0.0, 'E': 0.0, 'Y': 0.0}, ((0, 1, 2), 1): {'P': 0.1415659182593494, 'C': 4.291381594774393, 'F': -7.086545338215403, 'X': 1.3593152954941174, 'E': 2.773005543227735, 'Y': -1.4787230135401812}, ((0, 1, 2), 2): {'P': -0.04300489659667761, 'C': -14.184750885770448, 'F': 26.863997738524528, 'X': -8.826213839051267, 'E': -8.676346487835437, 'Y': 4.86631837072933}, ((0, 1, 2), 3): {'P': 1.751866841752065, 'C': -0.029385483986363425, 'F': -11.723998074396583, 'X': 20.490841626080893, 'E': -14.187446401235375, 'Y': 3.6981214917853524}, ((0, 1, 2), 4): {'P': 2.796234644893616, 'C': 2.82736239339458, 'F': -8.020405164973813, 'X': -6.129354604429225, 'E': 13.5098230866855, 'Y': -4.983660355570665}, ((0, 1, 2), 5): {'P': 3.8801943914827746, 'C': -4.925089840833348, 'F': -1.3648951018288678, 'X': 5.063661931722239, 'E': -3.6941314054652494, 'Y': 1.0402600249224356}, ((0, 0, 2), 0): {'P': 0.015996800639882736, 'C': 0.0013337332533502888, 'F': 0.002665466906620395, 'X': -0.009998000399920015, 'E': -0.009998000399920015, 'Y': 0.0}, ((0, 1, 1), 0): {'P': 0.020762771168662653, 'C': 0.009228231530546083, 'F': -0.00999700089973008, 'X': -0.00999700089973008, 'E': -0.00999700089973008, 'Y': 0.0}, ((0, 5, 5), 3): {'P': 0.729475650568677, 'C': 3.2215260041318263, 'F': -5.0123352995796395, 'X': 10.487168948358885, 'E': -12.360123613235501, 'Y': 2.9342883097557326}, ((0, 0, 3), 4): {'P': -9.549447905650375, 'C': 11.368752047564586, 'F': 0.23822903724447286, 'X': -11.679533359930055, 'E': 14.042491580891344, 'Y': -4.420491400119981}, ((0, 0, 2), 1): {'P': -8.75455052772464, 'C': 13.185721844359087, 'F': -7.084503796726379, 'X': 1.3591793714909894, 'E': 2.7727282580273247, 'Y': -1.4785751494263997}, ((0, 5, 5), 0): {'P': -0.0048154815481638025, 'C': -0.0014811481148129246, 'F': -0.0011111111111130612, 'X': -0.0007410741074114213, 'E': -0.00037003700370075165, 'Y': -0.0014811481148129246}, ((0, 0, 5), 5): {'P': 1.0681403256654818, 'C': -3.751017007712205, 'F': 1.3437089566737797, 'X': 2.506211188614838, 'E': -1.9125878344376224, 'Y': 0.7355443711957363}, ((0, 1, 5), 5): {'P': 3.195980748181757, 'C': -5.863939167314324, 'F': 1.3427322182269847, 'X': 2.505720754831348, 'E': -1.913149156059064, 'Y': 0.7326546021332909}, ((0, 4, 5), 0): {'P': -1.4210854715202004e-14, 'C': -3.552713678800501e-15, 'F': -1.7763568394002505e-15, 'X': -1.7763568394002505e-15, 'E': -1.7763568394002505e-15, 'Y': -1.7763568394002505e-15}, ((0, 2, 5), 5): {'P': 3.195980748181757, 'C': -3.7528733172203506, 'F': -0.7683336318669873, 'X': 2.505720754831348, 'E': -1.913149156059064, 'Y': 0.7326546021332909}, ((0, 3, 5), 0): {'P': -0.0048154815481638025, 'C': -0.0014811481148129246, 'F': -0.0011111111111130612, 'X': -0.0014811481148129246, 'E': -0.00037003700370075165, 'Y': -0.0007410741074114213}, ((0, 2, 5), 0): {'P': 0.0, 'C': 0.0, 'F': 0.0, 'X': 0.0, 'E': 0.0, 'Y': 0.0}, ((0, 3, 5), 5): {'P': 3.1982541772664845, 'C': -3.751017007712205, 'F': 1.3437089566737797, 'X': 0.3760973370138352, 'E': -1.9125878344376224, 'Y': 0.7355443711957363}, ((0, 5, 5), 1): {'P': 1.738269635802439, 'C': -5.9264847662042826, 'F': 5.116633486064905, 'X': -1.2831624636804406, 'E': 0.9237475626267475, 'Y': -0.569003454609355}, ((0, 3, 4), 0): {'P': -7.105427357601002e-15, 'C': -3.552713678800501e-15, 'F': -1.7763568394002505e-15, 'X': -1.7763568394002505e-15, 'E': -1.7763568394002505e-15, 'Y': -1.7763568394002505e-15}, ((0, 0, 5), 4): {'P': -0.6006800656039175, 'C': 4.5293359681489065, 'F': -3.895072982313007, 'X': -7.699626983837302, 'E': 12.119518606710031, 'Y': -4.453474543104692}, ((0, 1, 4), 5): {'P': -0.9091746136415146, 'C': -4.118402559740684, 'F': 4.773557969925326, 'X': 3.7876190954672158, 'E': -5.461109998005451, 'Y': 1.927510105995097}, ((0, 1, 5), 0): {'P': 0.0, 'C': 0.0, 'F': 0.0, 'X': 0.0, 'E': 0.0, 'Y': 0.0}, ((0, 1, 5), 4): {'P': 1.5266931035968767, 'C': 2.4175421132536634, 'F': -3.8965736102989688, 'X': -7.701138068064356, 'E': 12.118137447491225, 'Y': -4.454660985978451}, ((0, 2, 4), 5): {'P': -0.9091746136415146, 'C': 0.9716752646328111, 'F': -0.3165198544481669, 'X': 3.7876190954672158, 'E': -5.461109998005451, 'Y': 1.927510105995097}, ((0, 4, 5), 1): {'P': 1.738269635802439, 'C': -5.9264847662042826, 'F': 5.116633486064905, 'X': -1.2831624636804406, 'E': -1.1956289829823419, 'Y': 1.5603730909997342}, ((0, 4, 5), 5): {'P': 3.1982541772664845, 'C': -3.751017007712205, 'F': 1.3437089566737797, 'X': 2.506211188614838, 'E': -4.0327016860386244, 'Y': 0.7355443711957363}, ((0, 2, 4), 0): {'P': -0.0048154815481638025, 'C': -0.0014811481148129246, 'F': -0.0011111111111130612, 'X': -0.0014811481148129246, 'E': -0.00037003700370075165, 'Y': -0.0007410741074114213}, ((0, 3, 3), 0): {'P': -0.004074407440739947, 'C': -0.001481148114809372, 'F': -0.0018521852185209298, 'X': -0.0007410741074105331, 'E': -0.0003700370036998635, 'Y': -0.001481148114809372}, ((0, 0, 4), 4): {'P': -4.899365941880141, 'C': 7.735527890328852, 'F': -2.8440883469910254, 'X': -8.653612148790423, 'E': 12.20220216848793, 'Y': -3.540663621155192}, ((0, 0, 1), 0): {'P': 0.0, 'C': 0.0, 'F': 0.0, 'X': 0.0, 'E': 0.0, 'Y': 0.0}, ((0, 0, 3), 0): {'P': 0.0, 'C': 0.0, 'F': 0.0, 'X': 0.0, 'E': 0.0, 'Y': 0.0}, ((0, 0, 4), 0): {'P': 0.006363363663638211, 'C': 0.0013638636136388271, 'F': 0.0009089091090892509, 'X': 0.0004549545045495762, 'E': 0.0009089091090892509, 'Y': 0.0}, ((0, 0, 5), 0): {'P': 0.0, 'C': 0.0, 'F': 0.0, 'X': 0.0, 'E': 0.0, 'Y': 0.0}, ((0, 1, 1), 1): {'P': 8.796536223430097, 'C': -7.124488964669098, 'F': -5.096539437274706, 'X': 0.8725855389088714, 'E': 5.112274753322557, 'Y': -2.5603681137177365}, ((0, 1, 1), 2): {'P': 12.453567738672023, 'C': -28.84622399854115, 'F': 29.213372985788673, 'X': -9.936701921285357, 'E': -6.946945472385505, 'Y': 4.062930667751309}, ((0, 1, 1), 3): {'P': 14.50007664638701, 'C': -16.565908492851143, 'F': -6.79545408880026, 'X': 18.756073500565346, 'E': -13.068391684239142, 'Y': 3.173604118938166}, ((0, 1, 1), 4): {'P': 15.79612157173649, 'C': -15.383638250088985, 'F': -0.7128891203106953, 'X': -8.488946922549367, 'E': 14.018031587739438, 'Y': -5.2286788665268835}, ((0, 1, 1), 5): {'P': 17.131803505652215, 'C': -24.469976184909907, 'F': 7.981400225159279, 'X': 2.0786787866099763, 'E': -3.7972909016747582, 'Y': 1.0753845691631874}}


from rules_contract_v3 import get_canonical_tier_order, validate_min_max_continuous_bins

class PredictorV4:
    def __init__(self, nt_data=None, template_data=None):
        self.nt_data = nt_data or {}
        self.template_data = template_data or {}
        self.tier_order = get_canonical_tier_order()

    def predict(self, base_signature_sorted, template_dev=None):
        # Step 1: Normalize bases
        norm_bases, base_offset = self._normalize_bases(base_signature_sorted)
        nt_curve = self._lookup_nt_curve(norm_bases)

        # Step 2: Shift baseline curve upward by original offset
        shifted_curve = self._shift_curve(nt_curve, base_offset)

        # Step 3: Apply template bias (functional + adjustment layer)
        if template_dev is not None:
            biased_curve = self._apply_template_bias(shifted_curve, base_signature_sorted, template_dev)
        else:
            biased_curve = shifted_curve

        # Step 4: Enforce continuity and normalize
        final_curve = self._enforce_continuous_bins(biased_curve, base_signature_sorted, template_dev)
        return final_curve

    def _normalize_bases(self, bases):
        min_base = min(bases)
        normalized = tuple(sorted(b - min_base for b in bases))
        return normalized, min_base

    def _lookup_nt_curve(self, normalized_bases):
        if len(normalized_bases) in self.nt_data:
            nt_map = self.nt_data[len(normalized_bases)]
            return nt_map.get(normalized_bases, {tier: 0.0 for tier in self.tier_order})
        else:
            return {tier: 0.0 for tier in self.tier_order}

    def _shift_curve(self, curve, offset):
        shifted = {tier: 0.0 for tier in self.tier_order}
        for i, tier in enumerate(self.tier_order):
            prob = curve[tier]
            if prob > 0:
                target_idx = i + offset
                if target_idx < len(self.tier_order):
                    shifted[self.tier_order[target_idx]] = prob
        return shifted

    def _apply_template_bias(self, curve, base_signature_sorted, template_dev):
        # Polynomial bias with TemplateDev and BaseSpread
        coeffs = {'P': {'coef': [0.9857804543376465, 16.215169900933873, -0.434803432635146, 0.2515160864154762, -1.934475954514867], 'intercept': -43.65919500029081}, 'C': {'coef': [-36.59778833217798, -8.662165431963516, 4.794018376628289, 0.346310586617832, 1.2614632431136423], 'intercept': 65.76575893004919}, 'F': {'coef': [11.513743105906238, -10.812735828987195, -2.0607654250193193, 0.3587906760159951, 1.1842838043543824], 'intercept': 4.913411601860346}, 'X': {'coef': [20.692933641504275, -0.3602510327928754, -3.086230761379506, -0.6246098636948041, 0.16607469195316116], 'intercept': -17.660534487305497}, 'E': {'coef': [21.577718131516793, 4.507777846241174, -2.9690842100965558, -0.6108382386180624, -0.5191191885886383], 'intercept': -27.098918172607824}, 'Y': {'coef': [-18.171691336199714, -0.8847902017467351, 3.7564594874239052, 0.2787919234897869, -0.15860250328547243], 'intercept': 17.74029543992617}}
        d = template_dev
        s = max(base_signature_sorted) - min(base_signature_sorted)
        features = [d, s, d**2, d*s, s**2]

        adjusted = {}
        for tier in self.tier_order:
            c = coeffs[tier]['coef']
            intercept = coeffs[tier]['intercept']
            delta = sum(ci*fi for ci,fi in zip(c, features)) + intercept
            adjusted[tier] = curve.get(tier, 0.0) + delta

        # Apply residual adjustment if exists
        norm_bases = tuple(sorted(b - min(base_signature_sorted) for b in base_signature_sorted))
        key = (norm_bases, template_dev)
        if key in adjustment_layer:
            for tier in self.tier_order:
                adjusted[tier] += adjustment_layer[key][tier]

        return adjusted

    def _enforce_continuous_bins(self, curve, base_signature_sorted, template_dev):
        input_tiers = [self.tier_order[v] for v in base_signature_sorted]
        if template_dev is not None:
            input_tiers.append(self.tier_order[template_dev])

        if not validate_min_max_continuous_bins(input_tiers, curve):
            return curve

        total = sum(curve.values())
        if total > 0:
            curve = {k: v * (100.0 / total) for k, v in curve.items()}

        return curve
